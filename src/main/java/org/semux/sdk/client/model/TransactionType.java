/*
 * Semux API
 * Semux is an experimental high-performance blockchain platform that powers decentralized application.
 *
 * OpenAPI spec version: 2.5.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.semux.sdk.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * TransactionType
 */

public class TransactionType {
  @JsonProperty("hash")
  private String hash = null;

  /**
   * The transaction type
   */
  public enum TypeEnum {
    COINBASE("COINBASE"),
    
    TRANSFER("TRANSFER"),
    
    DELEGATE("DELEGATE"),
    
    VOTE("VOTE"),
    
    UNVOTE("UNVOTE"),
    
    CREATE("CREATE"),
    
    CALL("CALL");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("type")
  private TypeEnum type = null;

  @JsonProperty("from")
  private String from = null;

  @JsonProperty("to")
  private String to = null;

  @JsonProperty("value")
  private String value = null;

  @JsonProperty("fee")
  private String fee = null;

  @JsonProperty("nonce")
  private String nonce = null;

  @JsonProperty("timestamp")
  private String timestamp = null;

  @JsonProperty("data")
  private String data = null;

  @JsonProperty("gas")
  private String gas = null;

  @JsonProperty("gasPrice")
  private String gasPrice = null;

  public TransactionType hash(String hash) {
    this.hash = hash;
    return this;
  }

   /**
   * The transaction hash
   * @return hash
  **/
  @ApiModelProperty(value = "The transaction hash")
  public String getHash() {
    return hash;
  }

  public void setHash(String hash) {
    this.hash = hash;
  }

  public TransactionType type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * The transaction type
   * @return type
  **/
  @ApiModelProperty(value = "The transaction type")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public TransactionType from(String from) {
    this.from = from;
    return this;
  }

   /**
   * Sender&#39;s address
   * @return from
  **/
  @ApiModelProperty(value = "Sender's address")
  public String getFrom() {
    return from;
  }

  public void setFrom(String from) {
    this.from = from;
  }

  public TransactionType to(String to) {
    this.to = to;
    return this;
  }

   /**
   * Recipient&#39;s address
   * @return to
  **/
  @ApiModelProperty(value = "Recipient's address")
  public String getTo() {
    return to;
  }

  public void setTo(String to) {
    this.to = to;
  }

  public TransactionType value(String value) {
    this.value = value;
    return this;
  }

   /**
   * Transaction value in nano SEM
   * @return value
  **/
  @ApiModelProperty(value = "Transaction value in nano SEM")
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }

  public TransactionType fee(String fee) {
    this.fee = fee;
    return this;
  }

   /**
   * Transaction fee in nano SEM. For CREATE/CALL, this field is zero; use gas instead
   * @return fee
  **/
  @ApiModelProperty(value = "Transaction fee in nano SEM. For CREATE/CALL, this field is zero; use gas instead")
  public String getFee() {
    return fee;
  }

  public void setFee(String fee) {
    this.fee = fee;
  }

  public TransactionType nonce(String nonce) {
    this.nonce = nonce;
    return this;
  }

   /**
   * The nonce of the sender
   * @return nonce
  **/
  @ApiModelProperty(value = "The nonce of the sender")
  public String getNonce() {
    return nonce;
  }

  public void setNonce(String nonce) {
    this.nonce = nonce;
  }

  public TransactionType timestamp(String timestamp) {
    this.timestamp = timestamp;
    return this;
  }

   /**
   * Transaction timestamp in milliseconds specified by the sender. There can be a time drift up to 2 hours.
   * @return timestamp
  **/
  @ApiModelProperty(value = "Transaction timestamp in milliseconds specified by the sender. There can be a time drift up to 2 hours.")
  public String getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(String timestamp) {
    this.timestamp = timestamp;
  }

  public TransactionType data(String data) {
    this.data = data;
    return this;
  }

   /**
   * Transaction data encoded in hexadecimal string
   * @return data
  **/
  @ApiModelProperty(value = "Transaction data encoded in hexadecimal string")
  public String getData() {
    return data;
  }

  public void setData(String data) {
    this.data = data;
  }

  public TransactionType gas(String gas) {
    this.gas = gas;
    return this;
  }

   /**
   * The gas limit set by the sender
   * @return gas
  **/
  @ApiModelProperty(value = "The gas limit set by the sender")
  public String getGas() {
    return gas;
  }

  public void setGas(String gas) {
    this.gas = gas;
  }

  public TransactionType gasPrice(String gasPrice) {
    this.gasPrice = gasPrice;
    return this;
  }

   /**
   * The gas Price set by the sender
   * @return gasPrice
  **/
  @ApiModelProperty(value = "The gas Price set by the sender")
  public String getGasPrice() {
    return gasPrice;
  }

  public void setGasPrice(String gasPrice) {
    this.gasPrice = gasPrice;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionType transactionType = (TransactionType) o;
    return Objects.equals(this.hash, transactionType.hash) &&
        Objects.equals(this.type, transactionType.type) &&
        Objects.equals(this.from, transactionType.from) &&
        Objects.equals(this.to, transactionType.to) &&
        Objects.equals(this.value, transactionType.value) &&
        Objects.equals(this.fee, transactionType.fee) &&
        Objects.equals(this.nonce, transactionType.nonce) &&
        Objects.equals(this.timestamp, transactionType.timestamp) &&
        Objects.equals(this.data, transactionType.data) &&
        Objects.equals(this.gas, transactionType.gas) &&
        Objects.equals(this.gasPrice, transactionType.gasPrice);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hash, type, from, to, value, fee, nonce, timestamp, data, gas, gasPrice);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionType {\n");
    
    sb.append("    hash: ").append(toIndentedString(hash)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    fee: ").append(toIndentedString(fee)).append("\n");
    sb.append("    nonce: ").append(toIndentedString(nonce)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    gas: ").append(toIndentedString(gas)).append("\n");
    sb.append("    gasPrice: ").append(toIndentedString(gasPrice)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

