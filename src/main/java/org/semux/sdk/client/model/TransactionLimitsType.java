/*
 * Semux API
 * Semux is an experimental high-performance blockchain platform that powers decentralized application.
 *
 * OpenAPI spec version: 2.5.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.semux.sdk.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * TransactionLimitsType
 */

public class TransactionLimitsType {
  @JsonProperty("maxTransactionDataSize")
  private Integer maxTransactionDataSize = null;

  @JsonProperty("minTransactionFee")
  private String minTransactionFee = null;

  @JsonProperty("minDelegateBurnAmount")
  private String minDelegateBurnAmount = null;

  public TransactionLimitsType maxTransactionDataSize(Integer maxTransactionDataSize) {
    this.maxTransactionDataSize = maxTransactionDataSize;
    return this;
  }

   /**
   * The maximum transaction size in bytes
   * @return maxTransactionDataSize
  **/
  @ApiModelProperty(value = "The maximum transaction size in bytes")
  public Integer getMaxTransactionDataSize() {
    return maxTransactionDataSize;
  }

  public void setMaxTransactionDataSize(Integer maxTransactionDataSize) {
    this.maxTransactionDataSize = maxTransactionDataSize;
  }

  public TransactionLimitsType minTransactionFee(String minTransactionFee) {
    this.minTransactionFee = minTransactionFee;
    return this;
  }

   /**
   * The minimum transaction fee in nano SEM
   * @return minTransactionFee
  **/
  @ApiModelProperty(value = "The minimum transaction fee in nano SEM")
  public String getMinTransactionFee() {
    return minTransactionFee;
  }

  public void setMinTransactionFee(String minTransactionFee) {
    this.minTransactionFee = minTransactionFee;
  }

  public TransactionLimitsType minDelegateBurnAmount(String minDelegateBurnAmount) {
    this.minDelegateBurnAmount = minDelegateBurnAmount;
    return this;
  }

   /**
   * The amount of nano SEM required to burn for delegate registration
   * @return minDelegateBurnAmount
  **/
  @ApiModelProperty(value = "The amount of nano SEM required to burn for delegate registration")
  public String getMinDelegateBurnAmount() {
    return minDelegateBurnAmount;
  }

  public void setMinDelegateBurnAmount(String minDelegateBurnAmount) {
    this.minDelegateBurnAmount = minDelegateBurnAmount;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionLimitsType transactionLimitsType = (TransactionLimitsType) o;
    return Objects.equals(this.maxTransactionDataSize, transactionLimitsType.maxTransactionDataSize) &&
        Objects.equals(this.minTransactionFee, transactionLimitsType.minTransactionFee) &&
        Objects.equals(this.minDelegateBurnAmount, transactionLimitsType.minDelegateBurnAmount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(maxTransactionDataSize, minTransactionFee, minDelegateBurnAmount);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionLimitsType {\n");
    
    sb.append("    maxTransactionDataSize: ").append(toIndentedString(maxTransactionDataSize)).append("\n");
    sb.append("    minTransactionFee: ").append(toIndentedString(minTransactionFee)).append("\n");
    sb.append("    minDelegateBurnAmount: ").append(toIndentedString(minDelegateBurnAmount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

