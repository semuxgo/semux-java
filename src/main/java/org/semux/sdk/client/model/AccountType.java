/*
 * Semux API
 * Semux is an experimental high-performance blockchain platform that powers decentralized application.
 *
 * OpenAPI spec version: 2.5.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.semux.sdk.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * AccountType
 */

public class AccountType {
  @JsonProperty("address")
  private String address = null;

  @JsonProperty("available")
  private String available = null;

  @JsonProperty("locked")
  private String locked = null;

  @JsonProperty("nonce")
  private String nonce = null;

  @JsonProperty("transactionCount")
  private Integer transactionCount = null;

  @JsonProperty("internalTransactionCount")
  private Integer internalTransactionCount = null;

  @JsonProperty("pendingTransactionCount")
  private Integer pendingTransactionCount = null;

  public AccountType address(String address) {
    this.address = address;
    return this;
  }

   /**
   * The address of this account
   * @return address
  **/
  @ApiModelProperty(value = "The address of this account")
  public String getAddress() {
    return address;
  }

  public void setAddress(String address) {
    this.address = address;
  }

  public AccountType available(String available) {
    this.available = available;
    return this;
  }

   /**
   * The available balance of this account
   * @return available
  **/
  @ApiModelProperty(value = "The available balance of this account")
  public String getAvailable() {
    return available;
  }

  public void setAvailable(String available) {
    this.available = available;
  }

  public AccountType locked(String locked) {
    this.locked = locked;
    return this;
  }

   /**
   * The locked balance of this account
   * @return locked
  **/
  @ApiModelProperty(value = "The locked balance of this account")
  public String getLocked() {
    return locked;
  }

  public void setLocked(String locked) {
    this.locked = locked;
  }

  public AccountType nonce(String nonce) {
    this.nonce = nonce;
    return this;
  }

   /**
   * The nonce of this account
   * @return nonce
  **/
  @ApiModelProperty(value = "The nonce of this account")
  public String getNonce() {
    return nonce;
  }

  public void setNonce(String nonce) {
    this.nonce = nonce;
  }

  public AccountType transactionCount(Integer transactionCount) {
    this.transactionCount = transactionCount;
    return this;
  }

   /**
   * The number of transactions received/sent
   * @return transactionCount
  **/
  @ApiModelProperty(value = "The number of transactions received/sent")
  public Integer getTransactionCount() {
    return transactionCount;
  }

  public void setTransactionCount(Integer transactionCount) {
    this.transactionCount = transactionCount;
  }

  public AccountType internalTransactionCount(Integer internalTransactionCount) {
    this.internalTransactionCount = internalTransactionCount;
    return this;
  }

   /**
   * The number of internal transactions received/sent
   * @return internalTransactionCount
  **/
  @ApiModelProperty(value = "The number of internal transactions received/sent")
  public Integer getInternalTransactionCount() {
    return internalTransactionCount;
  }

  public void setInternalTransactionCount(Integer internalTransactionCount) {
    this.internalTransactionCount = internalTransactionCount;
  }

  public AccountType pendingTransactionCount(Integer pendingTransactionCount) {
    this.pendingTransactionCount = pendingTransactionCount;
    return this;
  }

   /**
   * The number of pending transaction from/to this account
   * @return pendingTransactionCount
  **/
  @ApiModelProperty(value = "The number of pending transaction from/to this account")
  public Integer getPendingTransactionCount() {
    return pendingTransactionCount;
  }

  public void setPendingTransactionCount(Integer pendingTransactionCount) {
    this.pendingTransactionCount = pendingTransactionCount;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountType accountType = (AccountType) o;
    return Objects.equals(this.address, accountType.address) &&
        Objects.equals(this.available, accountType.available) &&
        Objects.equals(this.locked, accountType.locked) &&
        Objects.equals(this.nonce, accountType.nonce) &&
        Objects.equals(this.transactionCount, accountType.transactionCount) &&
        Objects.equals(this.internalTransactionCount, accountType.internalTransactionCount) &&
        Objects.equals(this.pendingTransactionCount, accountType.pendingTransactionCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, available, locked, nonce, transactionCount, internalTransactionCount, pendingTransactionCount);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountType {\n");
    
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    available: ").append(toIndentedString(available)).append("\n");
    sb.append("    locked: ").append(toIndentedString(locked)).append("\n");
    sb.append("    nonce: ").append(toIndentedString(nonce)).append("\n");
    sb.append("    transactionCount: ").append(toIndentedString(transactionCount)).append("\n");
    sb.append("    internalTransactionCount: ").append(toIndentedString(internalTransactionCount)).append("\n");
    sb.append("    pendingTransactionCount: ").append(toIndentedString(pendingTransactionCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

