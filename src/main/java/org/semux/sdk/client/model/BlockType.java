/*
 * Semux API
 * Semux is an experimental high-performance blockchain platform that powers decentralized application.
 *
 * OpenAPI spec version: 2.5.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.semux.sdk.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import org.semux.sdk.client.model.TransactionType;

/**
 * BlockType
 */

public class BlockType {
  @JsonProperty("hash")
  private String hash = null;

  @JsonProperty("number")
  private String number = null;

  @JsonProperty("view")
  private Integer view = null;

  @JsonProperty("coinbase")
  private String coinbase = null;

  @JsonProperty("parentHash")
  private String parentHash = null;

  @JsonProperty("timestamp")
  private String timestamp = null;

  @JsonProperty("transactionsRoot")
  private String transactionsRoot = null;

  @JsonProperty("resultsRoot")
  private String resultsRoot = null;

  @JsonProperty("stateRoot")
  private String stateRoot = null;

  @JsonProperty("data")
  private String data = null;

  @JsonProperty("transactions")
  private List<TransactionType> transactions = null;

  public BlockType hash(String hash) {
    this.hash = hash;
    return this;
  }

   /**
   * The block hash
   * @return hash
  **/
  @ApiModelProperty(value = "The block hash")
  public String getHash() {
    return hash;
  }

  public void setHash(String hash) {
    this.hash = hash;
  }

  public BlockType number(String number) {
    this.number = number;
    return this;
  }

   /**
   * The block number
   * @return number
  **/
  @ApiModelProperty(value = "The block number")
  public String getNumber() {
    return number;
  }

  public void setNumber(String number) {
    this.number = number;
  }

  public BlockType view(Integer view) {
    this.view = view;
    return this;
  }

   /**
   * The view number. # of additional BFT rounds to generated this block
   * @return view
  **/
  @ApiModelProperty(value = "The view number. # of additional BFT rounds to generated this block")
  public Integer getView() {
    return view;
  }

  public void setView(Integer view) {
    this.view = view;
  }

  public BlockType coinbase(String coinbase) {
    this.coinbase = coinbase;
    return this;
  }

   /**
   * The block producer&#39;s address
   * @return coinbase
  **/
  @ApiModelProperty(value = "The block producer's address")
  public String getCoinbase() {
    return coinbase;
  }

  public void setCoinbase(String coinbase) {
    this.coinbase = coinbase;
  }

  public BlockType parentHash(String parentHash) {
    this.parentHash = parentHash;
    return this;
  }

   /**
   * The hash of the parent block
   * @return parentHash
  **/
  @ApiModelProperty(value = "The hash of the parent block")
  public String getParentHash() {
    return parentHash;
  }

  public void setParentHash(String parentHash) {
    this.parentHash = parentHash;
  }

  public BlockType timestamp(String timestamp) {
    this.timestamp = timestamp;
    return this;
  }

   /**
   * Block timestamp in milliseconds specified by the block producer.
   * @return timestamp
  **/
  @ApiModelProperty(value = "Block timestamp in milliseconds specified by the block producer.")
  public String getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(String timestamp) {
    this.timestamp = timestamp;
  }

  public BlockType transactionsRoot(String transactionsRoot) {
    this.transactionsRoot = transactionsRoot;
    return this;
  }

   /**
   * The Merkle root hash of the transactions
   * @return transactionsRoot
  **/
  @ApiModelProperty(value = "The Merkle root hash of the transactions")
  public String getTransactionsRoot() {
    return transactionsRoot;
  }

  public void setTransactionsRoot(String transactionsRoot) {
    this.transactionsRoot = transactionsRoot;
  }

  public BlockType resultsRoot(String resultsRoot) {
    this.resultsRoot = resultsRoot;
    return this;
  }

   /**
   * The Merkle root hash of the results
   * @return resultsRoot
  **/
  @ApiModelProperty(value = "The Merkle root hash of the results")
  public String getResultsRoot() {
    return resultsRoot;
  }

  public void setResultsRoot(String resultsRoot) {
    this.resultsRoot = resultsRoot;
  }

  public BlockType stateRoot(String stateRoot) {
    this.stateRoot = stateRoot;
    return this;
  }

   /**
   * The state root hash. Not enabled yet!
   * @return stateRoot
  **/
  @ApiModelProperty(value = "The state root hash. Not enabled yet!")
  public String getStateRoot() {
    return stateRoot;
  }

  public void setStateRoot(String stateRoot) {
    this.stateRoot = stateRoot;
  }

  public BlockType data(String data) {
    this.data = data;
    return this;
  }

   /**
   * The extra data of this block
   * @return data
  **/
  @ApiModelProperty(value = "The extra data of this block")
  public String getData() {
    return data;
  }

  public void setData(String data) {
    this.data = data;
  }

  public BlockType transactions(List<TransactionType> transactions) {
    this.transactions = transactions;
    return this;
  }

  public BlockType addTransactionsItem(TransactionType transactionsItem) {
    if (this.transactions == null) {
      this.transactions = new ArrayList<TransactionType>();
    }
    this.transactions.add(transactionsItem);
    return this;
  }

   /**
   * A list of transaction in the block
   * @return transactions
  **/
  @ApiModelProperty(value = "A list of transaction in the block")
  public List<TransactionType> getTransactions() {
    return transactions;
  }

  public void setTransactions(List<TransactionType> transactions) {
    this.transactions = transactions;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BlockType blockType = (BlockType) o;
    return Objects.equals(this.hash, blockType.hash) &&
        Objects.equals(this.number, blockType.number) &&
        Objects.equals(this.view, blockType.view) &&
        Objects.equals(this.coinbase, blockType.coinbase) &&
        Objects.equals(this.parentHash, blockType.parentHash) &&
        Objects.equals(this.timestamp, blockType.timestamp) &&
        Objects.equals(this.transactionsRoot, blockType.transactionsRoot) &&
        Objects.equals(this.resultsRoot, blockType.resultsRoot) &&
        Objects.equals(this.stateRoot, blockType.stateRoot) &&
        Objects.equals(this.data, blockType.data) &&
        Objects.equals(this.transactions, blockType.transactions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hash, number, view, coinbase, parentHash, timestamp, transactionsRoot, resultsRoot, stateRoot, data, transactions);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BlockType {\n");
    
    sb.append("    hash: ").append(toIndentedString(hash)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    view: ").append(toIndentedString(view)).append("\n");
    sb.append("    coinbase: ").append(toIndentedString(coinbase)).append("\n");
    sb.append("    parentHash: ").append(toIndentedString(parentHash)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    transactionsRoot: ").append(toIndentedString(transactionsRoot)).append("\n");
    sb.append("    resultsRoot: ").append(toIndentedString(resultsRoot)).append("\n");
    sb.append("    stateRoot: ").append(toIndentedString(stateRoot)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    transactions: ").append(toIndentedString(transactions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

