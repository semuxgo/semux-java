/*
 * Semux API
 * Semux is an experimental high-performance blockchain platform that powers decentralized application.
 *
 * OpenAPI spec version: 2.5.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.semux.sdk.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * InternalTransactionType
 */

public class InternalTransactionType {
  @JsonProperty("rootTransactionHash")
  private String rootTransactionHash = null;

  @JsonProperty("rejected")
  private Boolean rejected = null;

  @JsonProperty("depth")
  private String depth = null;

  @JsonProperty("index")
  private String index = null;

  @JsonProperty("type")
  private String type = null;

  @JsonProperty("from")
  private String from = null;

  @JsonProperty("to")
  private String to = null;

  @JsonProperty("nonce")
  private String nonce = null;

  @JsonProperty("gas")
  private String gas = null;

  @JsonProperty("gasPrice")
  private String gasPrice = null;

  @JsonProperty("value")
  private String value = null;

  @JsonProperty("data")
  private String data = null;

  public InternalTransactionType rootTransactionHash(String rootTransactionHash) {
    this.rootTransactionHash = rootTransactionHash;
    return this;
  }

   /**
   * The root transaction hash
   * @return rootTransactionHash
  **/
  @ApiModelProperty(value = "The root transaction hash")
  public String getRootTransactionHash() {
    return rootTransactionHash;
  }

  public void setRootTransactionHash(String rootTransactionHash) {
    this.rootTransactionHash = rootTransactionHash;
  }

  public InternalTransactionType rejected(Boolean rejected) {
    this.rejected = rejected;
    return this;
  }

   /**
   * Whether this transaction is rejected
   * @return rejected
  **/
  @ApiModelProperty(value = "Whether this transaction is rejected")
  public Boolean isRejected() {
    return rejected;
  }

  public void setRejected(Boolean rejected) {
    this.rejected = rejected;
  }

  public InternalTransactionType depth(String depth) {
    this.depth = depth;
    return this;
  }

   /**
   * Call depth
   * @return depth
  **/
  @ApiModelProperty(value = "Call depth")
  public String getDepth() {
    return depth;
  }

  public void setDepth(String depth) {
    this.depth = depth;
  }

  public InternalTransactionType index(String index) {
    this.index = index;
    return this;
  }

   /**
   * Call index
   * @return index
  **/
  @ApiModelProperty(value = "Call index")
  public String getIndex() {
    return index;
  }

  public void setIndex(String index) {
    this.index = index;
  }

  public InternalTransactionType type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Call type, possibly CALL, DELEGATECALL, CALLCODE, CREATE, CREATE2
   * @return type
  **/
  @ApiModelProperty(value = "Call type, possibly CALL, DELEGATECALL, CALLCODE, CREATE, CREATE2")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public InternalTransactionType from(String from) {
    this.from = from;
    return this;
  }

   /**
   * Sender address
   * @return from
  **/
  @ApiModelProperty(value = "Sender address")
  public String getFrom() {
    return from;
  }

  public void setFrom(String from) {
    this.from = from;
  }

  public InternalTransactionType to(String to) {
    this.to = to;
    return this;
  }

   /**
   * Receiver address
   * @return to
  **/
  @ApiModelProperty(value = "Receiver address")
  public String getTo() {
    return to;
  }

  public void setTo(String to) {
    this.to = to;
  }

  public InternalTransactionType nonce(String nonce) {
    this.nonce = nonce;
    return this;
  }

   /**
   * The sender&#39;s nonce
   * @return nonce
  **/
  @ApiModelProperty(value = "The sender's nonce")
  public String getNonce() {
    return nonce;
  }

  public void setNonce(String nonce) {
    this.nonce = nonce;
  }

  public InternalTransactionType gas(String gas) {
    this.gas = gas;
    return this;
  }

   /**
   * The gas limit
   * @return gas
  **/
  @ApiModelProperty(value = "The gas limit")
  public String getGas() {
    return gas;
  }

  public void setGas(String gas) {
    this.gas = gas;
  }

  public InternalTransactionType gasPrice(String gasPrice) {
    this.gasPrice = gasPrice;
    return this;
  }

   /**
   * The gas Price
   * @return gasPrice
  **/
  @ApiModelProperty(value = "The gas Price")
  public String getGasPrice() {
    return gasPrice;
  }

  public void setGasPrice(String gasPrice) {
    this.gasPrice = gasPrice;
  }

  public InternalTransactionType value(String value) {
    this.value = value;
    return this;
  }

   /**
   * The value being passed, in nano SEM
   * @return value
  **/
  @ApiModelProperty(value = "The value being passed, in nano SEM")
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }

  public InternalTransactionType data(String data) {
    this.data = data;
    return this;
  }

   /**
   * The data being passed, in hexadecimal string
   * @return data
  **/
  @ApiModelProperty(value = "The data being passed, in hexadecimal string")
  public String getData() {
    return data;
  }

  public void setData(String data) {
    this.data = data;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InternalTransactionType internalTransactionType = (InternalTransactionType) o;
    return Objects.equals(this.rootTransactionHash, internalTransactionType.rootTransactionHash) &&
        Objects.equals(this.rejected, internalTransactionType.rejected) &&
        Objects.equals(this.depth, internalTransactionType.depth) &&
        Objects.equals(this.index, internalTransactionType.index) &&
        Objects.equals(this.type, internalTransactionType.type) &&
        Objects.equals(this.from, internalTransactionType.from) &&
        Objects.equals(this.to, internalTransactionType.to) &&
        Objects.equals(this.nonce, internalTransactionType.nonce) &&
        Objects.equals(this.gas, internalTransactionType.gas) &&
        Objects.equals(this.gasPrice, internalTransactionType.gasPrice) &&
        Objects.equals(this.value, internalTransactionType.value) &&
        Objects.equals(this.data, internalTransactionType.data);
  }

  @Override
  public int hashCode() {
    return Objects.hash(rootTransactionHash, rejected, depth, index, type, from, to, nonce, gas, gasPrice, value, data);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InternalTransactionType {\n");
    
    sb.append("    rootTransactionHash: ").append(toIndentedString(rootTransactionHash)).append("\n");
    sb.append("    rejected: ").append(toIndentedString(rejected)).append("\n");
    sb.append("    depth: ").append(toIndentedString(depth)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    nonce: ").append(toIndentedString(nonce)).append("\n");
    sb.append("    gas: ").append(toIndentedString(gas)).append("\n");
    sb.append("    gasPrice: ").append(toIndentedString(gasPrice)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

